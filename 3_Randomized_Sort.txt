#include <iostream>
#include <cstdlib>
#include <ctime>

using namespace std;

int comparisons = 0;

// function to partition the array
int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
            comparisons++;  // increment comparison count
        }
    }

    swap(arr[i + 1], arr[high]);
    comparisons++;  // increment comparison count
    return i + 1;
}

// function to perform randomized quicksort
void quicksort(int arr[], int low, int high) {
    if (low < high) {
        // generate a random pivot index and swap it with the last element
        srand(time(NULL));
        int random = low + rand() % (high - low);
        swap(arr[random], arr[high]);
        comparisons++;  // increment comparison count

        int pi = partition(arr, low, high);

        quicksort(arr, low, pi - 1);
        quicksort(arr, pi + 1, high);
    }
}

int main() {
    int arr[] = {9, 7, 4, 1, 6, 2};
    int n = sizeof(arr) / sizeof(arr[0]);

    quicksort(arr, 0, n - 1);

    // print the sorted array and the number of comparisons
    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    cout << "Number of comparisons: " << comparisons << endl;

    return 0;
}
