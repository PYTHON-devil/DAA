#include <iostream>
#include <random>
#include <chrono>

using namespace std;

// function to swap two elements in an array
void swap(int arr[], int i, int j) {
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}

// partition the array around a randomly selected pivot element
int partition(int arr[], int left, int right) {
    // generate a random index between left and right
    default_random_engine generator(chrono::system_clock::now().time_since_epoch().count());
    uniform_int_distribution<int> distribution(left, right);
    int pivot_index = distribution(generator);

    // swap the pivot element with the rightmost element
    swap(arr, pivot_index, right);

    // partition the array around the pivot
    int i = left - 1;
    for (int j = left; j < right; j++) {
        if (arr[j] < arr[right]) {
            i++;
            swap(arr, i, j);
        }
    }
    swap(arr, i+1, right);

    // return the index of the pivot element
    return i+1;
}

// recursive function to find the k-th smallest element in the array
int randomizedSelect(int arr[], int left, int right, int k, int& comparisons) {
    // base case
    if (left == right) {
        return arr[left];
    }

    // partition the array around a randomly selected pivot
    int pivot_index = partition(arr, left, right);

    // calculate the rank of the pivot element
    int pivot_rank = pivot_index - left + 1;

    // recursive case
    if (k == pivot_rank) {
        return arr[pivot_index];
    } else if (k < pivot_rank) {
        return randomizedSelect(arr, left, pivot_index-1, k, comparisons);
    } else {
        return randomizedSelect(arr, pivot_index+1, right, k-pivot_rank, comparisons);
    }
}

int main() {
    int arr[] = {3, 7, 2, 9, 4, 1, 6, 8, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    int k = 3;
    int comparisons = 0;

    int kth_smallest = randomizedSelect(arr, 0, n-1, k, comparisons);

    cout << "The " << k << "-th smallest element is: " << kth_smallest << endl;
    cout << "Number of comparisons: " << comparisons << endl;

    return 0;
}
