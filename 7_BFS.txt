#include <iostream>
#include <queue>
#include <vector>

using namespace std;

void bfs(vector<int> adj[], int start) {
    queue<int> q;
    vector<bool> visited(adj->size(), false); // initially mark all vertices as not visited

    visited[start] = true;
    q.push(start);

    while (!q.empty()) {
        int vertex = q.front();
        q.pop();
        cout << vertex << " ";

        // iterate through all the adjacent vertices of the current vertex
        for (int adj_vertex : adj[vertex]) {
            if (!visited[adj_vertex]) {
                visited[adj_vertex] = true;
                q.push(adj_vertex);
            }
        }
    }
}

int main() {
    int num_vertices = 5;
    vector<int> adj[num_vertices];

    // add edges to the graph
    adj[0].push_back(1);
    adj[0].push_back(4);
    adj[1].push_back(0);
    adj[1].push_back(2);
    adj[1].push_back(3);
    adj[1].push_back(4);
    adj[2].push_back(1);
    adj[2].push_back(3);
    adj[3].push_back(1);
    adj[3].push_back(2);
    adj[3].push_back(4);
    adj[4].push_back(0);
    adj[4].push_back(1);
    adj[4].push_back(3);

    cout << "BFS traversal starting from vertex 2: ";
    bfs(adj, 2);

    return 0;
}
