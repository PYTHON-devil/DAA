
#include <iostream>

using namespace std;

int comparisons = 0;

// function to heapify a subtree rooted at node i
void heapify(int arr[], int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest]) {
        largest = left;
    }

    if (right < n && arr[right] > arr[largest]) {
        largest = right;
    }

    // swap the root with the largest element, if necessary
    if (largest != i) {
        swap(arr[i], arr[largest]);
        comparisons++;  // increment comparison count
        heapify(arr, n, largest);
    }
}

// function to perform heap sort
void heapSort(int arr[], int n) {
    // build a max heap from the input array
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i);
    }

    // repeatedly extract the maximum element from the heap
    for (int i = n - 1; i >= 0; i--) {
        swap(arr[0], arr[i]);
        comparisons++;  // increment comparison count
        heapify(arr, i, 0);
    }
}

int main() {
    int arr[] = {9, 7, 4, 1, 6, 2};
    int n = sizeof(arr) / sizeof(arr[0]);

    heapSort(arr, n);

    // print the sorted array and the number of comparisons
    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    cout << "Number of comparisons: " << comparisons << endl;

    return 0;
}
